{"ast":null,"code":"var _jsxFileName = \"/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport socket from \"../../Utils/socket\";\nimport \"./ChatArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatArea({\n  ecdh,\n  friendOnline\n}) {\n  _s();\n\n  const [encrypted, setEncrypted] = useState(false);\n  const [buttonText, setButtonText] = useState(\"Encrypted\");\n  const [messages, setMessages] = useState([]);\n  const [encryptedMessages, setEncyptedMessages] = useState([]);\n\n  const toogleEncrypted = () => {\n    if (encrypted) {\n      setEncrypted(false);\n      setButtonText(\"Decrypted\");\n    } else {\n      setEncrypted(true);\n      setButtonText(\"Encrypted\");\n    }\n  };\n\n  const scrollDown = () => {\n    document.getElementById(\"message_box\").scrollTop = document.getElementById(\"message_box\").scrollHeight;\n  };\n\n  let messageContent = \"\";\n  let ref;\n\n  const getContent = e => {\n    messageContent = e.target.value;\n    ref = e;\n  };\n\n  const onMessage = (e, content) => {\n    if (friendOnline === false) {\n      alert(\"No User Connected\");\n      return;\n    }\n\n    e.preventDefault();\n    if (content === \"\") return;\n    ref.target.value = \"\";\n    console.log(content);\n    let encryptedMessage = ecdh.encryptMessage(content);\n    console.log(encryptedMessage);\n    socket.emit(\"MESSAGE\", encryptedMessage);\n    setMessages(Messages => [...Messages, {\n      content,\n      fromSelf: true\n    }]);\n    setEncyptedMessages(Messages => [...Messages, {\n      encryptedMessage,\n      fromSelf: true\n    }]);\n    scrollDown();\n  };\n\n  const showMessages = encrypted => {\n    let MESSAGES = encrypted === true ? encryptedMessages : messages;\n    return MESSAGES.map((message, index) => {\n      if (message.fromSelf === true) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__message sender_message\",\n          children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat__time\",\n            children: new Date().toUTCString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 23\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this);\n      }\n\n      if (message.fromSelf === false) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat__message receiver_message\",\n          children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"chat__time\",\n            children: new Date().toUTCString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 23\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this);\n      } else {\n        return null;\n      }\n    });\n  };\n\n  socket.on(\"MESSAGE\", content => {\n    console.log(content);\n    let decryptedMessage = ecdh.decryptMessage(content);\n    console.log(decryptedMessage);\n    let messagesList = [...messages, {\n      decryptedMessage,\n      fromSelf: false\n    }];\n    setMessages(messagesList);\n    messagesList = [...encryptedMessages, {\n      content,\n      fromSelf: false\n    }];\n    setEncyptedMessages(messagesList);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat_navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"chat_leave_chat\",\n        children: \"Leave Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"change_text\",\n        onClick: toogleEncrypted,\n        children: buttonText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message_box\",\n      children: showMessages(encrypted)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      onSubmit: e => {\n        onMessage(e, messageContent);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"message\",\n        type: \"text\",\n        placeholder: \"Enter Message\",\n        onChange: e => getContent(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatArea, \"6BOxSAbKr9btIJz6Um+n11D7RjE=\");\n\n_c = ChatArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js"],"names":["React","useState","socket","ChatArea","ecdh","friendOnline","encrypted","setEncrypted","buttonText","setButtonText","messages","setMessages","encryptedMessages","setEncyptedMessages","toogleEncrypted","scrollDown","document","getElementById","scrollTop","scrollHeight","messageContent","ref","getContent","e","target","value","onMessage","content","alert","preventDefault","console","log","encryptedMessage","encryptMessage","emit","Messages","fromSelf","showMessages","MESSAGES","map","message","index","Date","toUTCString","on","decryptedMessage","decryptMessage","messagesList"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport socket from \"../../Utils/socket\"\nimport \"./ChatArea.css\"\n\nexport default function ChatArea({ecdh, friendOnline}) {\n\n    const [encrypted, setEncrypted] = useState(false)\n    const [buttonText, setButtonText] = useState(\"Encrypted\")\n    const [messages, setMessages] = useState([])\n    const [encryptedMessages, setEncyptedMessages] = useState([])\n\n    const toogleEncrypted = ()=>{\n        if(encrypted){\n            setEncrypted(false)\n            setButtonText(\"Decrypted\")\n        }else{\n            setEncrypted(true)\n            setButtonText(\"Encrypted\")\n        }\n    }\n\n    const scrollDown = ()=>{\n        document.getElementById(\"message_box\").scrollTop = document.getElementById(\"message_box\").scrollHeight;\n    }\n\n    let messageContent = \"\";\n    let ref;\n\n    const getContent = (e)=>{\n        messageContent =  e.target.value\n        ref = e\n    }\n\n    const onMessage = (e, content)=>{\n        \n        if(friendOnline===false){\n            alert(\"No User Connected\")\n            return\n        }\n\n        e.preventDefault();\n\n        if(content===\"\") return\n        \n        ref.target.value = \"\"\n        \n        console.log(content)\n        let encryptedMessage = ecdh.encryptMessage(content)\n        console.log(encryptedMessage)\n        socket.emit(\"MESSAGE\", encryptedMessage)\n        \n        setMessages((Messages) => [\n            ...Messages,\n            {content, fromSelf: true },\n        ]);\n\n        setEncyptedMessages((Messages)=>[\n            ...Messages,\n            {encryptedMessage, fromSelf: true},\n        ])\n\n        scrollDown()\n    }\n\n\n    \n    const showMessages = (encrypted)=>{\n        let MESSAGES = (encrypted===true)?encryptedMessages:messages; \n        return MESSAGES.map((message, index)=>{\n            if(message.fromSelf === true){\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message sender_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  );\n            }\n            if(message.fromSelf===false){\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message receiver_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  ); \n            }\n            else{return null}\n            }\n        )\n    }\n    \n    socket.on(\"MESSAGE\", (content)=>{\n        console.log(content)\n        let decryptedMessage = ecdh.decryptMessage(content)\n        console.log(decryptedMessage)\n        let messagesList = [...messages, {decryptedMessage, fromSelf:false}];\n        setMessages(messagesList);\n        messagesList = [...encryptedMessages, {content, fromSelf:false}];\n        setEncyptedMessages(messagesList)\n    })\n\n\n    return (\n        <div className=\"chat_area\">\n            <div id=\"chat_navbar\">\n                <button id=\"chat_leave_chat\">Leave Chat</button>\n                <button id=\"change_text\" onClick={toogleEncrypted}>{buttonText}</button>\n            </div>\n            <div id=\"message_box\">\n                {showMessages(encrypted)}\n            </div>\n            <form id=\"form\" onSubmit={(e)=>{onMessage(e,messageContent)}}>\n                <input id=\"message\" type=\"text\" placeholder=\"Enter Message\" onChange={(e) => getContent(e)}/>\n                <button id=\"submit\" type=\"submit\">Send</button>\n            </form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}