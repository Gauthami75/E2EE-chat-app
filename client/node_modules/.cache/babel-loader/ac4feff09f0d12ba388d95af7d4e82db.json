{"ast":null,"code":"import _toConsumableArray from\"/home/saumya/Projects/Assignment/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/saumya/Projects/Assignment/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import socket from\"../../Utils/socket\";import\"./ChatArea.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChatArea(_ref){var ecdh=_ref.ecdh,friendOnline=_ref.friendOnline;console.log(\"Rendering.... CHAT\");var _useState=useState(false),_useState2=_slicedToArray(_useState,2),encrypted=_useState2[0],setEncrypted=_useState2[1];var _useState3=useState(\"Encrypted\"),_useState4=_slicedToArray(_useState3,2),buttonText=_useState4[0],setButtonText=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),messages=_useState6[0],setMessages=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),encryptedMessages=_useState8[0],setEncyptedMessages=_useState8[1];var toogleEncrypted=function toogleEncrypted(){if(encrypted){setEncrypted(false);setButtonText(\"Encrypted\");}else{setEncrypted(true);setButtonText(\"Decrypted\");}};var scrollDown=function scrollDown(){document.getElementById(\"message_box\").scrollTop=document.getElementById(\"message_box\").scrollHeight;};var messageContent=\"\";var ref;var getContent=function getContent(e){messageContent=e.target.value;ref=e;};var onMessage=function onMessage(e,content){if(friendOnline===false){alert(\"No User Connected\");return;}e.preventDefault();if(content===\"\")return;ref.target.value=\"\";console.log(content);var encryptedMessage=ecdh.encryptMessage(content);console.log(encryptedMessage);socket.emit(\"MESSAGE\",encryptedMessage);setEncyptedMessages(function(Messages){return[].concat(_toConsumableArray(Messages),[{content:encryptedMessage,fromSelf:true}]);});setMessages(function(Messages){return[].concat(_toConsumableArray(Messages),[{content:content,fromSelf:true}]);});scrollDown();};var showMessages=function showMessages(encrypted){var MESSAGES=encrypted===true?encryptedMessages:messages;return MESSAGES.map(function(message,index){if(message.fromSelf===true){return/*#__PURE__*/_jsxs(\"div\",{className:\"chat__message sender_message\",children:[message.content,/*#__PURE__*/_jsx(\"span\",{className:\"chat__time\",children:new Date().toUTCString()})]},index);}if(message.fromSelf===false){return/*#__PURE__*/_jsxs(\"div\",{className:\"chat__message receiver_message\",children:[message.content,/*#__PURE__*/_jsx(\"span\",{className:\"chat__time\",children:new Date().toUTCString()})]},index);}else{return null;}});};socket.on(\"MESSAGE\",function(content){console.log(content);console.log(typeof content);var decryptedMessage=ecdh.decryptMessage(content);console.log(decryptedMessage);var messagesList=[].concat(_toConsumableArray(messages),[{content:decryptedMessage,fromSelf:false}]);setMessages(messagesList);messagesList=[].concat(_toConsumableArray(encryptedMessages),[{content:content,fromSelf:false}]);setEncyptedMessages(messagesList);});return/*#__PURE__*/_jsxs(\"div\",{className:\"chat_area\",children:[/*#__PURE__*/_jsxs(\"div\",{id:\"chat_navbar\",children:[/*#__PURE__*/_jsx(\"a\",{href:\"https://github.com/Saumya1503\",children:/*#__PURE__*/_jsx(\"button\",{id:\"chat_leave_chat\",children:\"LEAVE CHAT\"})}),/*#__PURE__*/_jsx(\"button\",{id:\"change_text\",title:\"See Encryped and Decrypted Messages\",onClick:toogleEncrypted,children:buttonText})]}),/*#__PURE__*/_jsx(\"div\",{id:\"message_box\",children:showMessages(encrypted)}),/*#__PURE__*/_jsxs(\"form\",{id:\"form\",onSubmit:function onSubmit(e){onMessage(e,messageContent);},children:[/*#__PURE__*/_jsx(\"input\",{id:\"message\",type:\"text\",placeholder:\"Enter Message\",onChange:function onChange(e){return getContent(e);}}),/*#__PURE__*/_jsx(\"button\",{id:\"submit\",type:\"submit\",children:\"Send\"})]})]});}","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js"],"names":["React","useState","socket","ChatArea","ecdh","friendOnline","console","log","encrypted","setEncrypted","buttonText","setButtonText","messages","setMessages","encryptedMessages","setEncyptedMessages","toogleEncrypted","scrollDown","document","getElementById","scrollTop","scrollHeight","messageContent","ref","getContent","e","target","value","onMessage","content","alert","preventDefault","encryptedMessage","encryptMessage","emit","Messages","fromSelf","showMessages","MESSAGES","map","message","index","Date","toUTCString","on","decryptedMessage","decryptMessage","messagesList"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport socket from \"../../Utils/socket\"\nimport \"./ChatArea.css\"\n\nexport default function ChatArea({ecdh, friendOnline}) {\n\n    console.log(\"Rendering.... CHAT\")\n\n    const [encrypted, setEncrypted] = useState(false)\n    const [buttonText, setButtonText] = useState(\"Encrypted\")\n    const [messages, setMessages] = useState([])\n    const [encryptedMessages, setEncyptedMessages] = useState([])\n\n    const toogleEncrypted = ()=>{\n        if(encrypted){\n            setEncrypted(false)\n            setButtonText(\"Encrypted\")\n        }else{\n            setEncrypted(true)\n            setButtonText(\"Decrypted\")\n        }\n    }\n\n    const scrollDown = ()=>{\n        document.getElementById(\"message_box\").scrollTop = document.getElementById(\"message_box\").scrollHeight;\n    }\n\n    let messageContent = \"\";\n    let ref;\n\n    const getContent = (e)=>{\n        messageContent =  e.target.value\n        ref = e\n    }\n\n    const onMessage = (e, content)=>{\n        \n        if(friendOnline===false){\n            alert(\"No User Connected\")\n            return\n        }\n\n        e.preventDefault();\n\n        if(content===\"\") return\n        \n        ref.target.value = \"\"\n        \n        console.log(content)\n        let encryptedMessage = ecdh.encryptMessage(content)\n        console.log(encryptedMessage)\n        socket.emit(\"MESSAGE\", encryptedMessage)\n        \n        setEncyptedMessages((Messages)=>[\n            ...Messages,\n            {content:encryptedMessage, fromSelf: true},\n        ]);\n\n        setMessages((Messages) => [\n            ...Messages,\n            {content, fromSelf: true },\n        ]);\n\n        scrollDown()\n    }\n\n\n    \n    const showMessages = (encrypted)=>{\n        let MESSAGES = (encrypted===true)?encryptedMessages:messages; \n        return MESSAGES.map((message, index)=>{\n            if(message.fromSelf === true){\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message sender_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  );\n            }\n            if(message.fromSelf===false){\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message receiver_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  ); \n            }\n            else{return null}\n            }\n        )\n    }\n    \n    socket.on(\"MESSAGE\", (content)=>{\n        console.log(content)\n        console.log(typeof(content))\n        let decryptedMessage = ecdh.decryptMessage(content)\n        console.log(decryptedMessage)\n        let messagesList = [...messages, {content:decryptedMessage, fromSelf:false}];\n        setMessages(messagesList);\n        messagesList = [...encryptedMessages, {content, fromSelf:false}];\n        setEncyptedMessages(messagesList)\n    })\n\n\n    return (\n        <div className=\"chat_area\">\n            <div id=\"chat_navbar\">\n            <a href=\"https://github.com/Saumya1503\"><button id=\"chat_leave_chat\">LEAVE CHAT</button></a>\n                <button id=\"change_text\" title=\"See Encryped and Decrypted Messages\" onClick={toogleEncrypted}>{buttonText}</button>\n            </div>\n            <div id=\"message_box\">\n                {showMessages(encrypted)}\n            </div>\n            <form id=\"form\" onSubmit={(e)=>{onMessage(e,messageContent)}}>\n                <input id=\"message\" type=\"text\" placeholder=\"Enter Message\" onChange={(e) => getContent(e)}/>\n                <button id=\"submit\" type=\"submit\">Send</button>\n            </form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}