{"ast":null,"code":"const crypo = require(\"crypto\");\n\nexport default function ECDH() {\n  const alice = crypo.createECDH(\"secp256k1\");\n  alice.generateKeys();\n\n  function getPublicKey() {\n    return alice.getPublicKey().toString('base64');\n  }\n\n  function getPublicKey() {\n    return alice.getPrivateKey().toString('base64');\n  }\n\n  function getSecretKey(bob_publicKey) {\n    return alice.computeSecret(bob_publicKey, 'base64', 'hex');\n  }\n}\n_c = ECDH;\n\nvar _c;\n\n$RefreshReg$(_c, \"ECDH\");","map":{"version":3,"sources":["/home/saumya/Assignment/client/src/Utils/ECDH.js"],"names":["crypo","require","ECDH","alice","createECDH","generateKeys","getPublicKey","toString","getPrivateKey","getSecretKey","bob_publicKey","computeSecret"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,eAAe,SAASC,IAAT,GAAe;AAE1B,QAAMC,KAAK,GAAGH,KAAK,CAACI,UAAN,CAAiB,WAAjB,CAAd;AACAD,EAAAA,KAAK,CAACE,YAAN;;AAEA,WAASC,YAAT,GAAuB;AACnB,WAAOH,KAAK,CAACG,YAAN,GAAqBC,QAArB,CAA8B,QAA9B,CAAP;AACH;;AAED,WAASD,YAAT,GAAuB;AACnB,WAAOH,KAAK,CAACK,aAAN,GAAsBD,QAAtB,CAA+B,QAA/B,CAAP;AACH;;AAED,WAASE,YAAT,CAAsBC,aAAtB,EAAoC;AAChC,WAAOP,KAAK,CAACQ,aAAN,CAAoBD,aAApB,EAAmC,QAAnC,EAA6C,KAA7C,CAAP;AACH;AAEJ;KAjBuBR,I","sourcesContent":["const crypo = require(\"crypto\")\n\nexport default function ECDH(){\n\n    const alice = crypo.createECDH(\"secp256k1\")\n    alice.generateKeys()\n\n    function getPublicKey(){\n        return alice.getPublicKey().toString('base64')\n    }\n\n    function getPublicKey(){\n        return alice.getPrivateKey().toString('base64')\n    }\n\n    function getSecretKey(bob_publicKey){\n        return alice.computeSecret(bob_publicKey, 'base64', 'hex')\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}