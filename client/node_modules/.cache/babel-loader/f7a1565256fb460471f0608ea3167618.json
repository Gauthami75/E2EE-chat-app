{"ast":null,"code":"import _classCallCheck from\"/home/saumya/Projects/Assignment/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/saumya/Projects/Assignment/client/node_modules/@babel/runtime/helpers/esm/createClass\";var crypto=require(\"crypto\");var ECDH=/*#__PURE__*/function(){function ECDH(){_classCallCheck(this,ECDH);this.algorithm='aes-256-ctr';this.alice=crypto.createECDH(\"secp256k1\");this.alice.generateKeys();this.sharedKey=\"\";}_createClass(ECDH,[{key:\"getPublicKey\",value:function getPublicKey(){return this.alice.getPublicKey().toString('base64');}},{key:\"getPrivateKey\",value:function getPrivateKey(){return this.alice.getPrivateKey().toString('base64');}},{key:\"getSecretKey\",value:function getSecretKey(bob_publicKey){this.sharedKey=this.alice.computeSecret(bob_publicKey,'base64','hex');return this.sharedKey;}},{key:\"encryptMessage\",value:function encryptMessage(MESSAGE){var IV=crypto.randomBytes(16);var cipher=crypto.createCipheriv('aes-256-gcm',Buffer.from(this.sharedKey,'hex'),IV);var encrypted=cipher.update(MESSAGE,'utf8','hex');encrypted+=cipher.final('hex');var auth_tag=cipher.getAuthTag().toString('hex');// console.table({\n// IV: IV.toString('hex'),\n// encrypted: encrypted,\n// auth_tag: auth_tag\n// });\nvar payload=IV.toString('hex')+encrypted+auth_tag;var payload64=Buffer.from(payload,'hex').toString('base64');// console.log(payload64);\nreturn payload64;}},{key:\"decryptMessage\",value:function decryptMessage(payload64){var bob_payload=Buffer.from(payload64,'base64').toString('hex');var bob_iv=bob_payload.substr(0,32);var bob_encrypted=bob_payload.substr(32,bob_payload.length-32-32);var bob_auth_tag=bob_payload.substr(bob_payload.length-32,32);// console.table({ bob_iv, bob_encrypted, bob_auth_tag });\ntry{var decipher=crypto.createDecipheriv('aes-256-gcm',Buffer.from(this.sharedKey,'hex'),Buffer.from(bob_iv,'hex'));decipher.setAuthTag(Buffer.from(bob_auth_tag,'hex'));var decrypted=decipher.update(bob_encrypted,'hex','utf8');decrypted+=decipher.final('utf8');// console.table({ DecyptedMessage: decrypted });\nreturn decrypted;}catch(error){console.log(error.message);}}}]);return ECDH;}();module.exports={ECDH:ECDH};","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Utils/ECDH.js"],"names":["crypto","require","ECDH","algorithm","alice","createECDH","generateKeys","sharedKey","getPublicKey","toString","getPrivateKey","bob_publicKey","computeSecret","MESSAGE","IV","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","final","auth_tag","getAuthTag","payload","payload64","bob_payload","bob_iv","substr","bob_encrypted","length","bob_auth_tag","decipher","createDecipheriv","setAuthTag","decrypted","error","console","log","message","module","exports"],"mappings":"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","sourcesContent":["const crypto = require(\"crypto\")\n\nclass ECDH{\n\n    constructor(){\n        this.algorithm = 'aes-256-ctr';\n        this.alice = crypto.createECDH(\"secp256k1\")\n        this.alice.generateKeys()\n        this.sharedKey = \"\"\n    }\n\n    getPublicKey(){\n        return this.alice.getPublicKey().toString('base64')\n    }\n\n    getPrivateKey(){\n        return this.alice.getPrivateKey().toString('base64')\n    }\n\n    getSecretKey(bob_publicKey){\n        this.sharedKey = this.alice.computeSecret(bob_publicKey, 'base64', 'hex')\n        return this.sharedKey\n    }\n\n    encryptMessage(MESSAGE){\n\n        const IV = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(\n            'aes-256-gcm',\n            Buffer.from(this.sharedKey, 'hex'),\n            IV\n        );\n\n        let encrypted = cipher.update(MESSAGE, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n\n        const auth_tag = cipher.getAuthTag().toString('hex');\n\n        // console.table({\n        // IV: IV.toString('hex'),\n        // encrypted: encrypted,\n        // auth_tag: auth_tag\n        // });\n\n        const payload = IV.toString('hex') + encrypted + auth_tag;\n\n        const payload64 = Buffer.from(payload, 'hex').toString('base64');\n        // console.log(payload64);\n        return payload64;\n\n    }\n\n    decryptMessage(payload64){\n        \n        const bob_payload = Buffer.from(payload64, 'base64').toString('hex');\n\n        const bob_iv = bob_payload.substr(0, 32);\n        const bob_encrypted = bob_payload.substr(32, bob_payload.length - 32 - 32);\n        const bob_auth_tag = bob_payload.substr(bob_payload.length - 32, 32);\n\n        // console.table({ bob_iv, bob_encrypted, bob_auth_tag });\n\n        try {\n            const decipher = crypto.createDecipheriv(\n                'aes-256-gcm',\n                Buffer.from(this.sharedKey, 'hex'),\n                Buffer.from(bob_iv, 'hex')\n            );\n\n            decipher.setAuthTag(Buffer.from(bob_auth_tag, 'hex'));\n\n            let decrypted = decipher.update(bob_encrypted, 'hex', 'utf8');\n            decrypted += decipher.final('utf8');\n\n            // console.table({ DecyptedMessage: decrypted });\n\n            return decrypted\n        } catch (error) {\n            console.log(error.message);\n        }\n    }    \n\n}\n\n\nmodule.exports = {ECDH};"]},"metadata":{},"sourceType":"module"}