{"ast":null,"code":"const crypto = require(\"crypto\");\n\nclass ECDH {\n  constructor() {\n    this.algorithm = 'aes-256-ctr';\n    this.alice = crypto.createECDH(\"secp256k1\");\n    this.alice.generateKeys();\n    this.sharedKey = \"\";\n  }\n\n  getPublicKey() {\n    return this.alice.getPublicKey().toString('base64');\n  }\n\n  getPrivateKey() {\n    return this.alice.getPrivateKey().toString('base64');\n  }\n\n  async getSecretKey(bob_publicKey) {\n    this.sharedKey = this.alice.computeSecret(bob_publicKey, 'base64', 'hex');\n    return this.sharedKey;\n  }\n\n  async encryptMessage(MESSAGE) {\n    const IV = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-gcm', Buffer.from(this.sharedKey, 'hex'), IV);\n    let encrypted = cipher.update(MESSAGE, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    const auth_tag = cipher.getAuthTag().toString('hex'); // console.table({\n    // IV: IV.toString('hex'),\n    // encrypted: encrypted,\n    // auth_tag: auth_tag\n    // });\n\n    const payload = IV.toString('hex') + encrypted + auth_tag;\n    const payload64 = Buffer.from(payload, 'hex').toString('base64'); // console.log(payload64);\n\n    return payload64;\n  }\n\n  async decryptMessage(payload64) {\n    const bob_payload = Buffer.from(payload64, 'base64').toString('hex');\n    const bob_iv = bob_payload.substr(0, 32);\n    const bob_encrypted = bob_payload.substr(32, bob_payload.length - 32 - 32);\n    const bob_auth_tag = bob_payload.substr(bob_payload.length - 32, 32); // console.table({ bob_iv, bob_encrypted, bob_auth_tag });\n\n    try {\n      const decipher = crypto.createDecipheriv('aes-256-gcm', Buffer.from(this.sharedKey, 'hex'), Buffer.from(bob_iv, 'hex'));\n      decipher.setAuthTag(Buffer.from(bob_auth_tag, 'hex'));\n      let decrypted = decipher.update(bob_encrypted, 'hex', 'utf8');\n      decrypted += decipher.final('utf8'); // console.table({ DecyptedMessage: decrypted });\n\n      return decrypted;\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n}\n\nmodule.exports = {\n  ECDH\n};","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Utils/ECDH.js"],"names":["crypto","require","ECDH","constructor","algorithm","alice","createECDH","generateKeys","sharedKey","getPublicKey","toString","getPrivateKey","getSecretKey","bob_publicKey","computeSecret","encryptMessage","MESSAGE","IV","randomBytes","cipher","createCipheriv","Buffer","from","encrypted","update","final","auth_tag","getAuthTag","payload","payload64","decryptMessage","bob_payload","bob_iv","substr","bob_encrypted","length","bob_auth_tag","decipher","createDecipheriv","setAuthTag","decrypted","error","console","log","message","module","exports"],"mappings":"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","sourcesContent":["const crypto = require(\"crypto\")\n\nclass ECDH{\n\n    constructor(){\n        this.algorithm = 'aes-256-ctr';\n        this.alice = crypto.createECDH(\"secp256k1\")\n        this.alice.generateKeys()\n        this.sharedKey = \"\"\n    }\n\n    getPublicKey(){\n        return this.alice.getPublicKey().toString('base64')\n    }\n\n    getPrivateKey(){\n        return this.alice.getPrivateKey().toString('base64')\n    }\n\n    async getSecretKey(bob_publicKey){\n        this.sharedKey = this.alice.computeSecret(bob_publicKey, 'base64', 'hex')\n        return this.sharedKey\n    }\n\n    async encryptMessage(MESSAGE){\n\n        const IV = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(\n            'aes-256-gcm',\n            Buffer.from(this.sharedKey, 'hex'),\n            IV\n        );\n\n        let encrypted = cipher.update(MESSAGE, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n\n        const auth_tag = cipher.getAuthTag().toString('hex');\n\n        // console.table({\n        // IV: IV.toString('hex'),\n        // encrypted: encrypted,\n        // auth_tag: auth_tag\n        // });\n\n        const payload = IV.toString('hex') + encrypted + auth_tag;\n\n        const payload64 = Buffer.from(payload, 'hex').toString('base64');\n        // console.log(payload64);\n        return payload64;\n\n    }\n\n    async decryptMessage(payload64){\n        \n        const bob_payload = Buffer.from(payload64, 'base64').toString('hex');\n\n        const bob_iv = bob_payload.substr(0, 32);\n        const bob_encrypted = bob_payload.substr(32, bob_payload.length - 32 - 32);\n        const bob_auth_tag = bob_payload.substr(bob_payload.length - 32, 32);\n\n        // console.table({ bob_iv, bob_encrypted, bob_auth_tag });\n\n        try {\n            const decipher = crypto.createDecipheriv(\n                'aes-256-gcm',\n                Buffer.from(this.sharedKey, 'hex'),\n                Buffer.from(bob_iv, 'hex')\n            );\n\n            decipher.setAuthTag(Buffer.from(bob_auth_tag, 'hex'));\n\n            let decrypted = decipher.update(bob_encrypted, 'hex', 'utf8');\n            decrypted += decipher.final('utf8');\n\n            // console.table({ DecyptedMessage: decrypted });\n\n            return decrypted\n        } catch (error) {\n            console.log(error.message);\n        }\n    }    \n\n}\n\n\nmodule.exports = {ECDH};"]},"metadata":{},"sourceType":"module"}