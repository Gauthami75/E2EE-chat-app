{"ast":null,"code":"var _jsxFileName = \"/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport socket from \"../../Utils/socket\";\nimport \"./ChatArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatArea({\n  ecdh\n}) {\n  _s();\n\n  // const [encrypted, setEncrypted] = useState(false)\n  const [messages, setMessages] = useState([]); // const [encryptedMessages, setEncyptedMessages] = useState([])\n  // const toogleEncrypted = ()=>{setEncrypted(!encrypted)}\n\n  let messageContent = \"\";\n  let ref;\n\n  const getContent = e => {\n    messageContent = e.target.value;\n    ref = e;\n  };\n\n  const onMessage = (e, content) => {\n    e.prventDefalult();\n    ref.target.value = \"\";\n    socket.emit(\"MESSAGE\", content);\n    setMessages(Messages => [...Messages, {\n      content,\n      fromSelf: true\n    }]); // setEncyptedMessages(...encryptedMessages, {})\n  }; // (encrypted)=>{\n  //     let MESSAGES = (encrypted===true)?encryptedMessages:messages; \n  //     return \n\n\n  const showMessages = messages.map((message, index) => {\n    if (message.formSelf === true) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__message sender_message\",\n        children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat__time\",\n          children: new Date().toUTCString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 23\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__message receiver_message\",\n        children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat__time\",\n          children: new Date().toUTCString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 23\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this);\n    }\n  }); // }\n\n  socket.on(\"MESSAGE\", content => {\n    let newMessages = {\n      content,\n      fromSelf: false\n    };\n    const messagesList = [...messages, newMessages];\n    setMessages(messagesList);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat_navbar\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"chat_leave_chat\",\n        children: \"Leave Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message_box\",\n      children: showMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      onSubmit: e => {\n        onMessage(e, messageContent);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"message\",\n        type: \"text\",\n        placeholder: \"Enter Message\",\n        onChange: e => getContent(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatArea, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n\n_c = ChatArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js"],"names":["React","useState","socket","ChatArea","ecdh","messages","setMessages","messageContent","ref","getContent","e","target","value","onMessage","content","prventDefalult","emit","Messages","fromSelf","showMessages","map","message","index","formSelf","Date","toUTCString","on","newMessages","messagesList"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport socket from \"../../Utils/socket\"\nimport \"./ChatArea.css\"\n\nexport default function ChatArea({ecdh}) {\n\n    // const [encrypted, setEncrypted] = useState(false)\n    const [messages, setMessages] = useState([])\n    // const [encryptedMessages, setEncyptedMessages] = useState([])\n\n    // const toogleEncrypted = ()=>{setEncrypted(!encrypted)}\n\n    let messageContent = \"\";\n    let ref;\n\n    const getContent = (e)=>{\n        messageContent =  e.target.value\n        ref = e\n    }\n\n    const onMessage = (e, content)=>{\n        e.prventDefalult()\n        ref.target.value = \"\"\n        socket.emit(\"MESSAGE\", content)\n        setMessages((Messages) => [\n            ...Messages,\n            {content, fromSelf: true },\n            ]);\n        // setEncyptedMessages(...encryptedMessages, {})\n    }\n\n    // (encrypted)=>{\n    //     let MESSAGES = (encrypted===true)?encryptedMessages:messages; \n    //     return \n    const showMessages = messages.map((message, index)=>{\n            if(message.formSelf===true){\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message sender_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  );\n            }\n            else{\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message receiver_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  ); \n            }\n        }\n        )\n    // }\n    \n    socket.on(\"MESSAGE\", (content)=>{\n        let newMessages = {\n            content,\n            fromSelf: false,\n        };\n        const messagesList = [...messages, newMessages];\n        setMessages(messagesList);\n    })\n\n\n    return (\n        <div className=\"chat_area\">\n            <div id=\"chat_navbar\">\n                {/* <button id=\"change_text\" onClick={toogleEncrypted}>Change Text</button> */}\n                <button id=\"chat_leave_chat\">Leave Chat</button>\n            </div>\n            <div id=\"message_box\">\n                {showMessages}\n            </div>\n            <form id=\"form\" onSubmit={(e)=>{onMessage(e,messageContent)}}>\n                <input id=\"message\" type=\"text\" placeholder=\"Enter Message\" onChange={(e) => getContent(e)}/>\n                <button id=\"submit\" type=\"submit\">Send</button>\n            </form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}