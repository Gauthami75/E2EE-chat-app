{"ast":null,"code":"var _jsxFileName = \"/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport socket from \"../../Utils/socket\";\nimport \"./ChatArea.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatArea({\n  ecdh\n}) {\n  _s();\n\n  const [encrypted, setEncrypted] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [encryptedMessages, setEncyptedMessages] = useState([]);\n\n  const toogleEncrypted = () => {\n    setEncrypted(!encrypted);\n  };\n\n  let messageContent = \"\";\n  let ref;\n\n  const getContent = e => {\n    messageContent = e.target.value;\n    ref = e;\n  };\n\n  const onMessage = (e, content) => {\n    e.preventDefault();\n    console.log(\"Message is:\", content);\n    ref.target.value = \"\";\n    setMessages(Messages => [...Messages, {\n      content,\n      fromSelf: true\n    }]);\n  };\n\n  const showMessages = encrypted => {\n    let MESSAGES = encrypted === true ? encryptedMessages : messages;\n    return MESSAGES.map((message, index) => {\n      if (message.fromSelf === true) return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__message sender_message\",\n        children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat__time\",\n          children: new Date().toUTCString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 23\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__message receiver_message\",\n        children: [message.content, /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"chat__time\",\n          children: new Date().toUTCString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 23\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this);\n    });\n  };\n\n  socket.on(\"MESSAGE\", content => {\n    let newMessages = {\n      content,\n      fromSelf: false\n    };\n    const messagesList = [...messages, newMessages];\n    setMessages(messagesList);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat_area\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"chat_navbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"change_text\",\n        onClick: toogleEncrypted,\n        children: \"Change Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"chat_leave_chat\",\n        children: \"Leave Chat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message_box\",\n      children: showMessages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"form\",\n      onSubmit: e => {\n        onMessage(e, messageContent);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"message\",\n        type: \"text\",\n        placeholder: \"Enter Message\",\n        onChange: e => getContent(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit\",\n        type: \"submit\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatArea, \"id8Peu/xXYfbglYM5dzyZvV2DnA=\");\n\n_c = ChatArea;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Components/ChatArea/ChatArea.js"],"names":["React","useState","socket","ChatArea","ecdh","encrypted","setEncrypted","messages","setMessages","encryptedMessages","setEncyptedMessages","toogleEncrypted","messageContent","ref","getContent","e","target","value","onMessage","content","preventDefault","console","log","Messages","fromSelf","showMessages","MESSAGES","map","message","index","Date","toUTCString","on","newMessages","messagesList"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport socket from \"../../Utils/socket\"\nimport \"./ChatArea.css\"\n\nexport default function ChatArea({ecdh}) {\n\n    const [encrypted, setEncrypted] = useState(false)\n    const [messages, setMessages] = useState([])\n    const [encryptedMessages, setEncyptedMessages] = useState([])\n\n    const toogleEncrypted = ()=>{setEncrypted(!encrypted)}\n\n    let messageContent = \"\";\n    let ref;\n\n    const getContent = (e) => {\n        messageContent = e.target.value;\n        ref = e;\n    };\n\n    const onMessage = (e, content) => {\n        e.preventDefault();\n        console.log(\"Message is:\", content);\n        \n        ref.target.value = \"\";\n        setMessages((Messages) => [\n        ...Messages,\n        { content, fromSelf: true },\n        ]);\n    };  \n\n\n    const showMessages =(encrypted)=>{\n        let MESSAGES = (encrypted===true)?encryptedMessages:messages; \n        return MESSAGES.map((message, index)=>{\n            if(message.fromSelf === true)\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message sender_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  );\n            else\n                return (\n                    <div\n                      key={index}\n                      className=\"chat__message receiver_message\"\n                    >\n                      {message.content}\n                      <span className=\"chat__time\">{new Date().toUTCString()}</span>\n                    </div>\n                  ); \n        })}\n    \n    socket.on(\"MESSAGE\", (content)=>{\n        let newMessages = {\n            content,\n            fromSelf: false,\n        };\n        const messagesList = [...messages, newMessages];\n        setMessages(messagesList);\n    })\n\n\n    return (\n        <div className=\"chat_area\">\n            <div id=\"chat_navbar\">\n                <button id=\"change_text\" onClick={toogleEncrypted}>Change Text</button>\n                <button id=\"chat_leave_chat\">Leave Chat</button>\n            </div>\n            <div id=\"message_box\">\n                {showMessages}\n            </div>\n            <form id=\"form\" onSubmit={(e)=>{onMessage(e,messageContent)}}>\n                <input id=\"message\" type=\"text\" placeholder=\"Enter Message\" onChange={(e) => getContent(e)}/>\n                <button id=\"submit\" type=\"submit\">Send</button>\n            </form>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}