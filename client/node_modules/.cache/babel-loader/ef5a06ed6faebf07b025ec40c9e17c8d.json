{"ast":null,"code":"const crypo = require(\"crypto\");\n\nclass ECDH {\n  constructor() {\n    this.algorithm = 'aes-256-ctr';\n    this.alice = crypo.createECDH(\"secp256k1\");\n    this.alice.generateKeys();\n  }\n\n  getPublicKey() {\n    return this.alice.getPublicKey().toString('base64');\n  }\n\n  getPrivateKey() {\n    return this.alice.getPrivateKey().toString('base64');\n  }\n\n  getSecretKey(bob_publicKey) {\n    return this.alice.computeSecret(bob_publicKey, 'base64', 'hex');\n  }\n\n  encryptMessage(MESSAGE) {\n    const IV = crypto.randomBytes(16);\n    const cipher = crypto.createCipheriv('aes-256-gcm', Buffer.from(aliceSharedKey, 'hex'), IV);\n    let encrypted = cipher.update(MESSAGE, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    const auth_tag = cipher.getAuthTag().toString('hex'); // console.table({\n    // IV: IV.toString('hex'),\n    // encrypted: encrypted,\n    // auth_tag: auth_tag\n    // });\n\n    const payload = IV.toString('hex') + encrypted + auth_tag;\n    const payload64 = Buffer.from(payload, 'hex').toString('base64');\n    console.log(payload64);\n    return payload64;\n  }\n\n}\n\nmodule.exports = {\n  ECDH\n};","map":{"version":3,"sources":["/home/saumya/Projects/Assignment/client/src/Utils/ECDH.js"],"names":["crypo","require","ECDH","constructor","algorithm","alice","createECDH","generateKeys","getPublicKey","toString","getPrivateKey","getSecretKey","bob_publicKey","computeSecret","encryptMessage","MESSAGE","IV","crypto","randomBytes","cipher","createCipheriv","Buffer","from","aliceSharedKey","encrypted","update","final","auth_tag","getAuthTag","payload","payload64","console","log","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,QAAD,CAArB;;AAEA,MAAMC,IAAN,CAAU;AAENC,EAAAA,WAAW,GAAE;AACT,SAAKC,SAAL,GAAiB,aAAjB;AACA,SAAKC,KAAL,GAAaL,KAAK,CAACM,UAAN,CAAiB,WAAjB,CAAb;AACA,SAAKD,KAAL,CAAWE,YAAX;AACH;;AAEDC,EAAAA,YAAY,GAAE;AACV,WAAO,KAAKH,KAAL,CAAWG,YAAX,GAA0BC,QAA1B,CAAmC,QAAnC,CAAP;AACH;;AAEDC,EAAAA,aAAa,GAAE;AACX,WAAO,KAAKL,KAAL,CAAWK,aAAX,GAA2BD,QAA3B,CAAoC,QAApC,CAAP;AACH;;AAEDE,EAAAA,YAAY,CAACC,aAAD,EAAe;AACvB,WAAO,KAAKP,KAAL,CAAWQ,aAAX,CAAyBD,aAAzB,EAAwC,QAAxC,EAAkD,KAAlD,CAAP;AACH;;AAEDE,EAAAA,cAAc,CAACC,OAAD,EAAS;AAEnB,UAAMC,EAAE,GAAGC,MAAM,CAACC,WAAP,CAAmB,EAAnB,CAAX;AACA,UAAMC,MAAM,GAAGF,MAAM,CAACG,cAAP,CACf,aADe,EAEfC,MAAM,CAACC,IAAP,CAAYC,cAAZ,EAA4B,KAA5B,CAFe,EAGfP,EAHe,CAAf;AAMA,QAAIQ,SAAS,GAAGL,MAAM,CAACM,MAAP,CAAcV,OAAd,EAAuB,MAAvB,EAA+B,KAA/B,CAAhB;AACAS,IAAAA,SAAS,IAAIL,MAAM,CAACO,KAAP,CAAa,KAAb,CAAb;AAEA,UAAMC,QAAQ,GAAGR,MAAM,CAACS,UAAP,GAAoBnB,QAApB,CAA6B,KAA7B,CAAjB,CAZmB,CAcnB;AACA;AACA;AACA;AACA;;AAEA,UAAMoB,OAAO,GAAGb,EAAE,CAACP,QAAH,CAAY,KAAZ,IAAqBe,SAArB,GAAiCG,QAAjD;AAEA,UAAMG,SAAS,GAAGT,MAAM,CAACC,IAAP,CAAYO,OAAZ,EAAqB,KAArB,EAA4BpB,QAA5B,CAAqC,QAArC,CAAlB;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,WAAOA,SAAP;AAEH;;AA9CK;;AAoDVG,MAAM,CAACC,OAAP,GAAiB;AAAChC,EAAAA;AAAD,CAAjB","sourcesContent":["const crypo = require(\"crypto\")\n\nclass ECDH{\n\n    constructor(){\n        this.algorithm = 'aes-256-ctr';\n        this.alice = crypo.createECDH(\"secp256k1\")\n        this.alice.generateKeys()\n    }\n\n    getPublicKey(){\n        return this.alice.getPublicKey().toString('base64')\n    }\n\n    getPrivateKey(){\n        return this.alice.getPrivateKey().toString('base64')\n    }\n\n    getSecretKey(bob_publicKey){\n        return this.alice.computeSecret(bob_publicKey, 'base64', 'hex')\n    }\n\n    encryptMessage(MESSAGE){\n\n        const IV = crypto.randomBytes(16);\n        const cipher = crypto.createCipheriv(\n        'aes-256-gcm',\n        Buffer.from(aliceSharedKey, 'hex'),\n        IV\n        );\n\n        let encrypted = cipher.update(MESSAGE, 'utf8', 'hex');\n        encrypted += cipher.final('hex');\n\n        const auth_tag = cipher.getAuthTag().toString('hex');\n\n        // console.table({\n        // IV: IV.toString('hex'),\n        // encrypted: encrypted,\n        // auth_tag: auth_tag\n        // });\n\n        const payload = IV.toString('hex') + encrypted + auth_tag;\n\n        const payload64 = Buffer.from(payload, 'hex').toString('base64');\n        console.log(payload64);\n        return payload64;\n\n    }\n\n\n}\n\n\nmodule.exports = {ECDH};"]},"metadata":{},"sourceType":"module"}